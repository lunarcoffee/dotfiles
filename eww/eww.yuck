(defwindow main
           :monitor 0
           :geometry (geometry :width "1536px" :height "32px" :anchor "top center")
           :stacking "fg"
           :windowtype "dock"
           :exclusive true

  (centerbox :class "main-bar"
    (box :space-evenly false
      (workspaces)
      (memory)
      (temperature))
    (window-title)
    (box :space-evenly false
         :halign "end"
      (brightness)
      (audio)
      (overview)
      (battery)
      (clock))))

;; Clock widget

(defpoll time :interval "0.1s" `date +"%H:%M:%S"`)

(defwidget clock []
  (box :class "clock" { time }))

;; ACPI info widgets (battery, backlight brightness)

(deflisten acpi :initial '{ "brightness": "0%", "charging": false }'
  `~/.config/eww/scripts/listen_acpi`)

(defvar battery-icons '["󰂎", "󰁺", "󰁻", "󰁼", "󰁽", "󰁾", "󰁿", "󰂀", "󰂁", "󰂂", "󰁹"]')
(defvar battery-charging-icons '["󰢟", "󰢜", "󰂆", "󰂇", "󰂈", "󰢝", "󰂉", "󰢞", "󰂊", "󰂋", "󰂅"]')

(defwidget battery []
  (box :space-evenly false
       :class { "battery " + (EWW_BATTERY["BAT0"].capacity <= 15 ? "battery-low" : "") }
    (box :class "battery-text" "${EWW_BATTERY["BAT0"].capacity}%")
    (box :class { acpi.charging ? "battery-charging-icon" : "battery-icon" }
      "${(acpi.charging ? battery-charging-icons : battery-icons)
           [round(EWW_BATTERY["BAT0"].capacity / 10, 0)]}")))

(defvar brightness-icons '["󰃞", "󰃟", "󰃠"]')

(defwidget brightness []
  (box :space-evenly false
       :class "brightness"
    { acpi.brightness }
    (box :class "brightness-icon" 
      { brightness-icons[round(replace(acpi.brightness, "%", "") / 50, 0)] })))

;; Connectivity overview widget (Bluetooth, network)

;; TODO: surely there's a better way
(defpoll bt :interval "5s" `bluetoothctl show | rg Powered | cut -d\\  -f2`)

(deflisten nw `~/.config/eww/scripts/listen_network`)

(defwidget overview []
  (box :space-evenly false
       :class "network"
    (box :class "bt-icon" { bt == "no" ? "󰂲" : "󰂯" })
    (box :class "eth-icon"
         :visible { matches(nw, 'eth0') }
      "󰈀")
    (box :class "wl-icon" { matches(nw, "wlp2s0") ? "󱚿" : "󱘖" })))

;; PulseAudio state widget

(deflisten pa :initial '{ "speaker": { "volume": 0, "muted": false } }'
  `~/.config/eww/scripts/listen_pulse`)

(defvar speaker-icons '["󰖁", "󰕿", "󰖀", "󰕾"]')
(defvar speaker-classes '["speaker-0", "speaker-1", "speaker-2", "speaker-3"]')

(defwidget audio []
  (box :space-evenly false
       :class "audio"
    (box :class "speaker-text" "${pa.speaker.volume}%")
    (box :class "speaker-icon speaker-0"
         :visible { pa.speaker.muted }
      "󰝟")
    (box :class { "speaker-icon " + speaker-classes[round(pa.speaker.volume / 34 + 0.49, 0)] }
         :visible { !pa.speaker.muted }
      { speaker-icons[round(pa.speaker.volume / 34 + 0.49, 0)] })))

;; Hyprland info widgets

(deflisten hypr :initial '{ "workspaces": { "ids": [], "active": 0 }, "active_window": "" }'
  `~/.config/eww/scripts/listen_hyprland`)

(defwidget workspaces []
  (box :space-evenly false
       :class "workspaces"
    (for ws in { hypr.workspaces.ids }
      (button :onclick "hyprctl dispatch workspace ${ws}"
              :class { "ws-button" + (ws == hypr.workspaces.active ? " active" : "") }
        { "${ws}: ${ws == hypr.workspaces.active ? "" : ""}" }))))

(defwidget window-title []
  (box :hexpand true
       :class "title"
    { hypr["active_title"] }))

;; System resource info widgets

(defpoll temp :interval "10s" `sensors | rg temp1 | rg -o "\\d+.\\d+" | head -1`)

(defwidget temperature []
  (box :space-evenly false
       :class "temperature"
    "${round(temp, 0)}°C"
    (box :class "temp-icon" "󰈸")))

(defpoll ram-avail :interval "10s" `cat /proc/meminfo | rg MemAvailable | rg -o "\\d+"`)
(defpoll ram-total :interval "10s" `cat /proc/meminfo | rg MemTotal | rg -o "\\d+"`)

(defwidget memory []
  (box :space-evenly false
       :class "memory"
    "${round((ram-total - ram-avail) / ram-total * 100, 0)}%"
    (box :class "memory-icon" "󰍛")))


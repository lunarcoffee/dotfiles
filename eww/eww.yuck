(defwindow main
           :monitor 0
           :geometry (geometry :width "1536px" :height "32px" :anchor "top center")
           :stacking "fg"
           :windowtype "dock"
           :exclusive true

  (centerbox :class "main-bar"
    (box :space-evenly false
      (workspaces)
      (memory)
      (temperature))
    (window-title)
    (box :space-evenly false
         :halign "end"
      (brightness)
      (audio)
      (overview)
      (battery)
      (clock))))

;; Clock widget

(defpoll time :interval "0.1s" `date +"%H:%M:%S"`)
(defpoll date :interval "2s" `date +"%A %B %d, %Y"`)

(defvar calendar-open false)

(defwidget clock []
  (eventbox :onclick { calendar-open ? "${EWW_CMD} update calendar-open=false && eww close calendar"
                                     : "${EWW_CMD} update calendar-open=true && eww open calendar" }
    (box :class "clock" :tooltip date time)))

;; Power-related widgets (battery, backlight brightness)

(deflisten acpi :initial '{ "charging": false }' `~/.config/eww/scripts/listen_acpi`)
(defpoll time-left :interval "15s" `acpi -b | rg -o "\\d+:\\d+" | ~/.config/eww/scripts/time_to_words`)

(defvar battery-icons '["󰂎", "󰁺", "󰁻", "󰁼", "󰁽", "󰁾", "󰁿", "󰂀", "󰂁", "󰂂", "󰁹"]')
(defvar battery-charging-icons '["󰢟", "󰢜", "󰂆", "󰂇", "󰂈", "󰢝", "󰂉", "󰢞", "󰂊", "󰂋", "󰂅"]')

(defwidget battery []
  (box :space-evenly false
       :tooltip { time-left == "" ? "Time left unavailable" : "${time-left} left" }
       :class { "battery " + (EWW_BATTERY.BAT0.capacity <= 15 ? "battery-low" : "") }
    (box :class "battery-text" "${EWW_BATTERY.BAT0.capacity}%")
    (box :class { acpi.charging ? "battery-charging-icon" : "battery-icon" }
      "${(acpi.charging ? battery-charging-icons : battery-icons)
           [round(EWW_BATTERY.BAT0.capacity / 10, 0)]}")))

(deflisten br :initial 0 `tail -f ~/.config/eww/state/brightness`)

(defvar brightness-icons '["󰃞", "󰃟", "󰃠"]')

(defwidget brightness []
  (box :space-evenly false
       :class "brightness"
    { br }
    (box :class "brightness-icon" 
      { brightness-icons[round(replace(br, "%", "") / 50, 0)] })))

;; Connectivity overview widget (Bluetooth, network)

;; TODO: surely there's a better way
(defpoll bt :interval "5s" `bluetoothctl show | rg Powered | cut -d\\  -f2`)

(deflisten nw :initial '{ "up": "", "wl_ssid": "" }'
  `~/.config/eww/scripts/listen_network`)

(defwidget overview []
  (box :space-evenly false
       :class "network"
    (box :class "bt-icon"
      (eventbox :onclick "blueman-manager &"
                ;; This is so immensely terrible but I can't be bothered rn
                :onrightclick { "sudo -S rfkill toggle bluetooth < ~/.config/eww/state/password 2> /dev/null ;" +
                                "eww update bt=${bt == "yes" ? "no" : "yes"}" }
        { bt == "no" ? "󰂲" : "󰂯" }))
    (box :class "eth-icon"
         :visible { matches(nw.up, "enp") }
      "󰈀")
    (eventbox :onclick "gnome-control-center wifi &"
      (box :class "wl-icon"
           :tooltip { matches(nw.up, "wlan") ? nw.wl_ssid : "Disconnected" }
        { matches(nw, "wlan") ? "󱚿" : "󱘖" }))))

;; PulseAudio state widget

(deflisten pa :initial '{ "speaker": { "volume": 0, "muted": false } }'
  `~/.config/eww/scripts/listen_pulse`)

(defvar speaker-icons '["󰖁", "󰕿", "󰖀", "󰕾"]')
(defvar speaker-classes '["speaker-0", "speaker-1", "speaker-2", "speaker-3"]')

(defwidget audio []
  (eventbox :onclick "pavucontrol &"
    (box :space-evenly false
         :class "audio"
      (box :class "speaker-text" "${pa.speaker.volume}%")
      (box :class "speaker-icon speaker-0"
           :visible { pa.speaker.muted }
        "󰝟")
      (box :class { "speaker-icon " + speaker-classes[round(pa.speaker.volume / 34 + 0.49, 0)] }
           :visible { !pa.speaker.muted }
        { speaker-icons[round(pa.speaker.volume / 34 + 0.49, 0)] }))))

;; Hyprland info widgets

(deflisten hypr :initial '{ "workspaces": { "ids": [], "active": 0 }, "active_window": "" }'
  `~/.config/eww/scripts/listen_hyprland`)

(defwidget workspaces []
  (box :space-evenly false
       :class "workspaces"
    (for ws in { hypr.workspaces.ids }
      (button :onclick "hyprctl dispatch workspace ${ws}"
              :class { "ws-button" + (ws == hypr.workspaces.active ? " active" : "") }
        { "${ws}: ${ws == hypr.workspaces.active ? "" : ""}" }))))

(defwidget window-title []
  (box :hexpand true
       :class "title"
    (label :text { hypr.active_title } 
           :limit-width 90
           :tooltip { hypr.active_title })))

;; System resource info widgets

(defpoll temp :initial 30 :interval "10s" `sensors | rg temp1 | rg -o "\\d+.\\d+" | head -1`)

(defwidget temperature []
  (box :space-evenly false
       :class "temperature"
    "${round(temp, 0)}°C"
    (box :class "temp-icon" "󰈸")))

(defpoll ram-avail :initial 1 :interval "10s" `cat /proc/meminfo | rg MemAvailable | rg -o "\\d+"`)
(defpoll ram-total :initial 1 :interval "10s" `cat /proc/meminfo | rg MemTotal | rg -o "\\d+"`)

(defwidget memory []
  (box :space-evenly false
       :tooltip { "${round((ram-total - ram-avail) / (1024 * 1024), 2)} GiB out of " +
                  "${round(ram-total / (1024 * 1024), 2)} GiB used" }
       :class "memory"
    "${round((ram-total - ram-avail) / ram-total * 100, 0)}%"
    (box :class "memory-icon" "󰍛")))

;; Clock widget popup calendar window

(defwindow calendar
           :monitor 0
           :geometry (geometry :x "8px" :y "8px" 
                               :width "200px" :height "200px" 
                               :anchor "top right")
           :stacking "fg"
           :windowtype "dialog"
           :exclusive false
  
  (calendar :show-heading true))

;; This seems scuffed
(defwindow main-2
           :monitor 1
           :geometry (geometry :width "1536px" :height "32px" :anchor "top center")
           :stacking "fg"
           :windowtype "dock"
           :exclusive true

  (centerbox :class "main-bar"
    (box :space-evenly false
      (workspaces)
      (memory)
      (temperature))
    (window-title)
    (box :space-evenly false
         :halign "end"
      (brightness)
      (audio)
      (overview)
      (battery)
      (clock))))
